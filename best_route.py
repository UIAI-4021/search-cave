# -*- coding: utf-8 -*-
"""Best route

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zrv0Tks_38al4oD7hiJWcWbUstIe70-8
"""

import pandas as pd
import heapq
import time
df = pd.read_csv('Flight_Data.csv')
Start = time.time()
def dijkstra(graph, graphD, graphF, graphA, start, end):
    prices = {node: float('inf') for node in graph}
    prices[start] = 0
    queue = [(0, start)]
    previous = {node: None for node in graph}
    previousP = {node: None for node in graph}
    previousD = {node: None for node in graph}
    previousF = {node: None for node in graph}
    previousA = {node: None for node in graph}
    visited = set()
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        if current_node in visited:
            continue
        visited.add(current_node)
        if current_node == end:
            path = []
            pathP = []
            pathD = []
            pathF = []
            pathA = []
            current_node = end
            while current_node != start:
                path.append(current_node)
                pathP.append(previousP[current_node])
                pathD.append(previousD[current_node])
                pathF.append(previousF[current_node])
                pathA.append(previousA[current_node])
                current_node = previous[current_node]
            path.append(start)
            Path = {}
            Path["Node"] = path[::-1]
            Path["Price"] = pathP[::-1]
            Path["Distance"] = pathD[::-1]
            Path["FlyTime"] = pathF[::-1]
            Path["Airline"] = pathA[::-1]
            Path["end"] = prices[end]
            return Path
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < prices[neighbor]:
                prices[neighbor] = distance
                previous[neighbor] = current_node
                previousP[neighbor] = graph[current_node][neighbor]
                previousD[neighbor] = graphD[current_node][neighbor]
                previousF[neighbor] = graphF[current_node][neighbor]
                previousA[neighbor] = graphA[current_node][neighbor]
                heapq.heappush(queue, (distance, neighbor))

graph = {}
graphD = {}
graphF = {}
graphA = {}
Country = {}
City = {}
for _, row in df.iterrows():
    weight = row.Price
    Distance = row.Distance
    FlyTime = row.FlyTime
    Airline = row.Airline
    Country[row.DestinationAirport] = row.DestinationAirport_Country
    City[row.DestinationAirport] = row.DestinationAirport_City
    graph.setdefault(row.SourceAirport, {})
    graphD.setdefault(row.SourceAirport, {})
    graphF.setdefault(row.SourceAirport, {})
    graphA.setdefault(row.SourceAirport, {})
    graph.setdefault(row.DestinationAirport, {})
    graphD.setdefault(row.DestinationAirport, {})
    graphF.setdefault(row.DestinationAirport, {})
    graphA.setdefault(row.DestinationAirport, {})
    graph[row.SourceAirport][row.DestinationAirport] = weight
    graphD[row.SourceAirport][row.DestinationAirport] = Distance
    graphF[row.SourceAirport][row.DestinationAirport] = FlyTime
    graphA[row.SourceAirport][row.DestinationAirport]= Airline
Path = dijkstra(graph, graphD, graphF, graphA, 'Imam Khomeini International Airport', 'Raleigh Durham International Airport')

s = f"""Dijkstra Algorithm
Execution Time: {time.time() - Start}
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
"""
TP = sum(Path["Price"])
TD = sum(Path["Distance"])
TT = sum(Path["FlyTime"])
n = len(Path["Airline"])

for i in range(1, n + 1):
    s += f"""Flight #{i} ({Path["Airline"][i - 1]})
From: {Path["Node"][i - 1]} - {City[Path["Node"][i - 1]]}, {Country[Path["Node"][i - 1]]}
To: {Path["Node"][i]} - {Country[Path["Node"][i]]}, {City[Path["Node"][i]]}
Duration: {Path["Distance"][i - 1]}km
Time: {Path["FlyTime"][i - 1]}h
Price: {Path["Price"][i - 1]}$
----------------------------
"""
s += f"""Total Price: {TP}
Total Duration: {TD}
Total Time: {TT}
"""
with open('14-UIAI4021-PR1-Q1(Dijkstra).txt', 'w') as file:
  file.write(s)